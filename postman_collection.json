{
  "info": {
    "name": "Laravel Blogging Platform API",
    "description": "Complete API collection for the Laravel blogging platform with authentication, posts, comments, and categories",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "postId",
      "value": "",
      "type": "string"
    },
    {
      "key": "categoryId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('token', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('User registered successfully', () => {",
                  "        pm.expect(response.user).to.have.property('name');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "        pm.expect(response).to.have.property('token');",
                  "    });",
                  "} else {",
                  "    pm.test('Registration failed', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([422, 400]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\",\n    \"password_confirmation\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('token', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.user).to.have.property('name');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "        pm.expect(response).to.have.property('token');",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', () => {",
                  "        pm.expect(pm.response.code).to.be.oneOf([401, 422]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "// Clear token after logout",
                  "pm.collectionVariables.set('token', '');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "logout"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "Get All Posts",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get posts successful', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    ",
                  "    if (response.data.length > 0) {",
                  "        const firstPost = response.data[0];",
                  "        pm.expect(firstPost).to.have.property('id');",
                  "        pm.expect(firstPost).to.have.property('title');",
                  "        pm.expect(firstPost).to.have.property('content');",
                  "        pm.expect(firstPost).to.have.property('user');",
                  "        pm.expect(firstPost).to.have.property('category');",
                  "        pm.expect(firstPost).to.have.property('comments_count');",
                  "        ",
                  "        // Store first post ID for other requests",
                  "        pm.collectionVariables.set('postId', firstPost.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('postId', response.data.id);",
                  "    pm.test('Post created successfully', () => {",
                  "        pm.expect(response.data).to.have.property('id');",
                  "        pm.expect(response.data).to.have.property('title');",
                  "        pm.expect(response.data).to.have.property('content');",
                  "        pm.expect(response.data).to.have.property('user');",
                  "        pm.expect(response.data).to.have.property('category');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized - token required', () => {",
                  "        pm.expect(pm.response.code).to.equal(401);",
                  "    });",
                  "} else {",
                  "    pm.test('Validation error', () => {",
                  "        pm.expect(pm.response.code).to.equal(422);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"My Amazing Blog Post\",\n    \"content\": \"This is the content of my amazing blog post. It contains lots of interesting information about various topics.\",\n    \"category_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Single Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get single post successful', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('title');",
                  "    pm.expect(response.data).to.have.property('content');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.expect(response.data).to.have.property('category');",
                  "    pm.expect(response.data).to.have.property('comments');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Post updated successfully', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.data).to.have.property('id');",
                  "        pm.expect(response.data).to.have.property('title');",
                  "        pm.expect(response.data).to.have.property('content');",
                  "    });",
                  "} else if (pm.response.code === 403) {",
                  "    pm.test('Forbidden - not post owner', () => {",
                  "        pm.expect(pm.response.code).to.equal(403);",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized - token required', () => {",
                  "        pm.expect(pm.response.code).to.equal(401);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Amazing Blog Post\",\n    \"content\": \"This is the updated content of my amazing blog post. It now contains even more interesting information.\",\n    \"category_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Post deleted successfully', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('message');",
                  "    });",
                  "} else if (pm.response.code === 403) {",
                  "    pm.test('Forbidden - not post owner', () => {",
                  "        pm.expect(pm.response.code).to.equal(403);",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized - token required', () => {",
                  "        pm.expect(pm.response.code).to.equal(401);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Add Comment to Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    pm.test('Comment added successfully', () => {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.data).to.have.property('id');",
                  "        pm.expect(response.data).to.have.property('content');",
                  "        pm.expect(response.data).to.have.property('user');",
                  "        pm.expect(response.data.user).to.have.property('name');",
                  "    });",
                  "} else if (pm.response.code === 401) {",
                  "    pm.test('Unauthorized - token required', () => {",
                  "        pm.expect(pm.response.code).to.equal(401);",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    pm.test('Post not found', () => {",
                  "        pm.expect(pm.response.code).to.equal(404);",
                  "    });",
                  "} else {",
                  "    pm.test('Validation error', () => {",
                  "        pm.expect(pm.response.code).to.equal(422);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This is a great blog post! Thank you for sharing this valuable information.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment - Unauthenticated (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthenticated request should fail', () => {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This comment should fail without authentication.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "comments"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get Posts by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get posts by category successful', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    ",
                  "    if (response.data.length > 0) {",
                  "        response.data.forEach(post => {",
                  "            pm.expect(post).to.have.property('id');",
                  "            pm.expect(post).to.have.property('title');",
                  "            pm.expect(post).to.have.property('content');",
                  "            pm.expect(post).to.have.property('user');",
                  "            pm.expect(post).to.have.property('category');",
                  "            pm.expect(post).to.have.property('comments_count');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/1/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "1",
                "posts"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Create Post - Missing Title (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation should fail for missing title', () => {",
                  "    pm.expect(pm.response.code).to.equal(422);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response.errors).to.have.property('title');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"This post is missing a title.\",\n    \"category_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Post - Invalid Category (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation should fail for invalid category', () => {",
                  "    pm.expect(pm.response.code).to.equal(422);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response.errors).to.have.property('category_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Post\",\n    \"content\": \"This post has an invalid category ID.\",\n    \"category_id\": 999999\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment - Empty Content (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation should fail for empty comment content', () => {",
                  "    pm.expect(pm.response.code).to.equal(422);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response.errors).to.have.property('content');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "comments"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Complete Flow Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This is a comprehensive test that should be run after authentication",
                  "console.log('Starting complete flow test...');",
                  "console.log('Current token:', pm.collectionVariables.get('token'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Complete API flow test', () => {",
                  "    // This test validates the entire API workflow",
                  "    const token = pm.collectionVariables.get('token');",
                  "    pm.expect(token).to.not.be.empty;",
                  "    ",
                  "    console.log('✅ Authentication token is present');",
                  "    console.log('✅ Ready to test authenticated endpoints');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "console.log('Method:', pm.request.method);",
          "",
          "// Log current token status",
          "const token = pm.collectionVariables.get('token');",
          "if (token) {",
          "    console.log('✅ Token is present');",
          "} else {",
          "    console.log('❌ No token found - authentication may be required');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response status:', pm.response.code);",
          "console.log('Response time:', pm.response.responseTime + 'ms');",
          "",
          "// Common tests for all requests",
          "pm.test('Response time is reasonable', () => {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content type', () => {",
          "    if (pm.response.code !== 404) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});",
          "",
          "// Log any errors",
          "if (pm.response.code >= 400) {",
          "    console.log('❌ Request failed with status:', pm.response.code);",
          "    try {",
          "        const errorResponse = pm.response.json();",
          "        console.log('Error details:', JSON.stringify(errorResponse, null, 2));",
          "    } catch (e) {",
          "        console.log('Error response body:', pm.response.text());",
          "    }",
          "} else {",
          "    console.log('✅ Request successful');",
          "}"
        ]
      }
    }
  ]
}